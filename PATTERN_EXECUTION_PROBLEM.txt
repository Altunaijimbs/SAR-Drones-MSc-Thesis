# DRONE PATTERN EXECUTION PROBLEM - CRITICAL DISCOVERY
# Date: August 8, 2025
# Project: SAR Drone MSc Thesis - Search Pattern Implementation

## PROBLEM STATEMENT
The drone appears to move in the visualizer (matplotlib plot showing X,Y movement), but in the actual UE5 simulator, the drone is mostly ROTATING (yaw) with minimal translational movement.

## ROOT CAUSE ANALYSIS

### DISCOVERY PROCESS
1. User noticed discrepancy: Visualizer shows movement, but UE5 shows mostly rotation
2. Hypothesis: Rotation is being misinterpreted as position change
3. Investigation revealed: Executor sending BOTH velocity AND yaw_rate simultaneously

### THE ACTUAL PROBLEM
```python
# In coordinated_banking_executor.py (lines 244-246):
if abs(yaw_error) > 0.5:  # ~29 degrees threshold
    speed = self.TURN_SPEED
    yaw_rate = np.clip(yaw_error * 1.5, -self.MAX_YAW_RATE, self.MAX_YAW_RATE)
```

The executor was:
1. Constantly calculating yaw error to face waypoints
2. Sending yaw_rate commands WITH velocity commands
3. Drone prioritizing rotation over translation
4. Result: Drone spins in place instead of moving

## SOLUTION IMPLEMENTED

### APPROACH 1: Fixed Movement Executor (NO YAW CONTROL)
Created `fixed_movement_executor.py` that:
- Removes ALL yaw control (angular.z = 0.0)
- Pure position-based movement
- Calculates velocity vectors in world frame
- No rotation commands at all

Key changes:
```python
def send_velocity_command(self, vx, vy, vz):
    cmd = Twist()
    cmd.linear.x = vx
    cmd.linear.y = vy
    cmd.linear.z = vz
    cmd.angular.z = 0.0  # NO YAW ROTATION!
    self.velocity_pub.publish(cmd)
```

## TESTING PROCEDURE

### Step 1: Launch the Fixed Executor
```bash
# Terminal 1: System
./launch_hybrid_system.sh

# Terminal 2: Pattern nodes
source /home/mbs/SAR-Drones-MSc-Thesis/ros2_ws/install/setup.bash
ros2 run search_patterns pattern_generator &
ros2 run search_patterns fixed_movement_executor

# Terminal 3: Test pattern
ros2 topic pub /pattern_command std_msgs/msg/String "data: 'expanding_square:5,1'" --once
ros2 topic pub /pattern_control std_msgs/msg/String "data: 'start'" --once
```

### Step 2: Diagnostic Monitoring
```bash
# Monitor what's being sent:
ros2 topic echo /search_pattern/velocity_command

# Should see:
# linear.x: non-zero (movement in X)
# linear.y: non-zero (movement in Y)
# angular.z: 0.0 (NO rotation)
```

### Step 3: Verification
- Watch drone in UE5: Should move in straight lines
- Watch visualizer: Should match actual movement
- No continuous spinning/rotation

## ALTERNATIVE SOLUTIONS TO EXPLORE

### Option 1: Turn-Then-Move Strategy
Modify executor to:
1. Stop at waypoint
2. Rotate to face next waypoint
3. Move forward without further rotation
4. Repeat

### Option 2: Body-Frame Velocity
Instead of world-frame velocity:
1. Always move "forward" in body frame
2. Control only yaw to steer
3. Like a car - turn wheels to steer

### Option 3: Reduce Yaw Sensitivity
- Increase yaw_error threshold from 0.5 to 1.0+ radians
- Only rotate when significantly off course
- Allow drone to "crab walk" slightly

## KEY INSIGHTS FOR CHATGPT

### CONTEXT
- ROS2 Humble environment
- PX4 autopilot simulation with MAVROS
- Velocity commands go through velocity_coordinator
- Multiple executors compete for control

### CRITICAL UNDERSTANDING
1. **Coordinate Frames Matter**: World frame (NED) vs Body frame
2. **Priority System**: velocity_coordinator manages multiple sources
3. **Command Coupling**: Yaw and translation commands can conflict
4. **Visualizer Limitation**: Shows pose, not actual movement dynamics

### FILES INVOLVED
- `/ros2_ws/src/search_patterns/search_patterns/coordinated_banking_executor.py` - Original problem
- `/ros2_ws/src/search_patterns/search_patterns/fixed_movement_executor.py` - Solution
- `/ros2_ws/src/search_patterns/search_patterns/velocity_coordinator.py` - Command routing
- `test_fixed_movement.sh` - Test script
- `diagnose_movement.sh` - Diagnostic tools

## EXPECTED OUTCOME
With fixed_movement_executor:
- Drone follows square/spiral/zigzag patterns
- Movement is purely translational (no rotation)
- Visualizer matches actual drone position
- Clean, predictable search patterns

## NEXT STEPS
1. Test fixed_movement_executor thoroughly
2. If successful, implement intelligent yaw control:
   - Face direction of travel only when needed
   - Separate turning and moving phases
   - Use body-frame forward movement
3. Optimize for search patterns where orientation matters
4. Record demonstration video

## TROUBLESHOOTING CHECKLIST
□ Is pattern_generator running?
□ Is executor receiving waypoints? Check: /pattern_waypoints
□ Is executor sending commands? Check: /search_pattern/velocity_command
□ Is velocity_coordinator forwarding? Check: /mavros/setpoint_velocity/cmd_vel_unstamped
□ Is drone responding? Check: /mavros/local_position/velocity_local
□ Do commanded and actual velocities match?

## SUCCESS CRITERIA
✓ Drone moves in clear geometric patterns
✓ No excessive rotation during movement
✓ Visualizer accurately represents drone position
✓ Patterns complete successfully
✓ Suitable for thesis demonstration

---
END OF PROBLEM DESCRIPTION
This file optimized for LLM understanding with clear structure, code examples, and actionable solutions.